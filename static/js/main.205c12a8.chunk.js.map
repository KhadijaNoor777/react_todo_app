{"version":3,"sources":["components/layout/Header.js","components/AddTodo.js","components/TodoItem.js","components/Todos.js","components/pages/About.js","App.js","reportWebVitals.js","index.js"],"names":["hStyle","background","color","textAlign","padding","linkStyle","textDecoration","Header","style","to","AddTodo","state","title","addInput","e","setState","target","name","value","submitTodo","preventDefault","props","addTodo","onSubmit","this","display","type","placeholder","onChange","flex","className","Component","TodoItem","getStyle","borderBottom","todo","completed","id","backgroundColor","markComplete","bind","onClick","deleteTodo","btnStyle","border","borderRadius","cursor","float","Todos","todos","map","React","About","App","console","log","Axios","delete","then","res","filter","newTodo","uuid","get","data","exact","path","render","Fragment","component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.205c12a8.chunk.js","sourcesContent":["import React from 'react'\r\nimport { Link } from 'react-router-dom';\r\n\r\nfunction Header() {\r\n    return (\r\n       <header style={hStyle}>\r\n           <h1>TodoList</h1>\r\n           <Link to='/' style={linkStyle} >Home</Link> | \r\n           <Link to='/about' style={linkStyle} > About</Link>\r\n       </header>\r\n    )\r\n}\r\n\r\nconst hStyle = {\r\n    background: 'black',\r\n    color: 'white',\r\n    textAlign: 'center',\r\n    padding: '10px'\r\n}\r\n\r\nconst linkStyle = {\r\n    color: 'white',\r\n    textDecoration: 'none'\r\n}\r\n\r\n\r\nexport default Header;\r\n\r\n","import React, { Component } from 'react'\r\nimport PropTypes from 'prop-types';\r\n\r\nexport class AddTodo extends Component {\r\n\r\n    state = {\r\n        title: ''\r\n    }\r\n\r\n    //updating forminput field with data\r\n    addInput = (e) => this.setState({[e.target.name]: e.target.value});\r\n\r\n    //adding new property and setting it to title\r\n    //again setting the title nothing\r\n    submitTodo = (e) => {\r\n        e.preventDefault();\r\n        this.props.addTodo(this.state.title);\r\n        this.setState({title: ''})\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <form onSubmit={this.submitTodo} style={{display: 'flex'}}>\r\n                <input type='text' name='title' placeholder='Add Todo...' \r\n                        value={this.state.title} onChange={this.addInput}\r\n                        style={{flex: '10', padding: '5px'}} />\r\n                <input type='submit' value='Submit' className='btn' style={{flex: '1'}} />\r\n            </form>\r\n        )\r\n    }\r\n}\r\n\r\nAddTodo.propTypes = {\r\n    addTodo: PropTypes.func.isRequired\r\n}\r\n\r\nexport default AddTodo\r\n","import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nexport class TodoItem extends Component {\r\n    \r\n    getStyle = () => {\r\n        return {\r\n            color: 'black',\r\n            padding: '10px',\r\n            borderBottom: '1px solid gray',\r\n            textDecoration: this.props.todo.completed ? 'line-through' : 'none'\r\n        }\r\n    }\r\n\r\n\r\n    \r\n    render() {\r\n\r\n        //destructuring\r\n        //if we do not want to use this.props.todo again and again then in this way we can access its properties.\r\n        const {id, title } = this.props.todo;   \r\n\r\n        return (\r\n            //use double curly braces for inline css\r\n            //single curly braces when using a variable/function\r\n            <div style={{backgroundColor: 'lightgray'}}>     \r\n              <p style={this.getStyle()}>\r\n              <input type=\"checkbox\" onChange={this.props.markComplete.bind(this, id)} /> {' '}\r\n              {this.props.todo.title} {' '}\r\n              <button onClick={this.props.deleteTodo.bind(this,id)} style={btnStyle}>x</button>\r\n              </p>  \r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nconst btnStyle = {\r\n    backgroundColor: \"red\",\r\n    color: \"white\",\r\n    border: \"none\",\r\n    padding: \"5px 10px\",\r\n    borderRadius: \"50%\",\r\n    cursor: \"pointer\",\r\n    float: \"right\"\r\n}\r\n\r\n//PropTypes\r\nTodoItem.propTypes = {\r\n    todo: PropTypes.object.isRequired,\r\n    markComplete: PropTypes.func.isRequired,\r\n    deleteTodo: PropTypes.func.isRequired\r\n  }\r\n\r\nexport default TodoItem\r\n","import React from 'react';\r\nimport TodoItem from './TodoItem';\r\nimport PropTypes from 'prop-types';\r\n\r\nclass Todos extends React.Component {\r\n\r\n  // markComplete = (e) => {\r\n  //   console.log(\"Hello\")\r\n  // }\r\n\r\n  render(){\r\n    //console.log(this.props.todos);\r\n    //getting todos from the state and displaying title of each\r\n    //iterating through the todos array using map function\r\n    return this.props.todos.map((todo) => (\r\n      //<h2>Todos</h2>\r\n      //<h4>{todo.title}</h4>\r\n      //<TodoItem key={todo.id} todo = {todo} markComplete={this.markComplete} />\r\n      <TodoItem key={todo.id} todo = {todo} markComplete={this.props.markComplete} deleteTodo={this.props.deleteTodo} />\r\n    ));\r\n  }\r\n}\r\n\r\n//PropTypes\r\nTodos.propTypes = {\r\n  todos: PropTypes.array.isRequired,\r\n  markComplete: PropTypes.func.isRequired,\r\n  deleteTodo: PropTypes.func.isRequired\r\n}\r\n\r\nexport default Todos;\r\n","import React from 'react'\r\n\r\nfunction About() {\r\n    return (\r\n        <div style={{textAlign: 'center'}}>\r\n            <h1>About</h1>\r\n            <p>This is a Todo List App. It can manage your todos in a great way. This is my first React App</p>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default About;\r\n","import React from 'react';      //include react for making class\nimport { BrowserRouter as Router, Route } from \"react-router-dom\";\nimport './App.css';\nimport Header from './components/layout/Header';\nimport AddTodo from './components/AddTodo';\nimport Todos from './components/Todos';\nimport {v4 as uuid} from 'uuid';      //for generating random ids, installed using 'npm i uuid'\nimport About from './components/pages/About';\nimport Axios from 'axios';    //fetches data from an api\n\nclass App extends React.Component {\n  state = {\n    todos: []\n    // todos: [\n    //   {\n    //     id: uuid(),\n    //     title: 'watch videos',\n    //     completed: false\n    //   },\n    //   {\n    //     id: uuid(),\n    //     title: 'update docs',\n    //     completed: false\n    //   },\n    //   {\n    //     id: uuid(),\n    //     title: 'Try on',\n    //     completed: false\n    //   }\n    // ]\n  }\n\n  //api request for data of todos\n  componentDidMount() {\n    Axios.get('https://jsonplaceholder.typicode.com/todos?_limit=10').then(res => this.setState({todos: res.data})); \n    //?_limit=10 defines how much rows of data we want\n  }\n\n\n  //toggle completed\n  markComplete = (id) => {\n    console.log(id)\n    //this.state.completed = true;\n    this.setState({todos: this.state.todos.map(todo => {\n      if(todo.id === id)\n        todo.completed = !todo.completed;\n      return todo;\n    })})\n  }\n\n  //deleting a todo\n  deleteTodo = (id) => {\n    console.log(id)\n    Axios.delete(`https://jsonplaceholder.typicode.com/todos/${id}`)\n                .then(res => this.setState({todos: [...this.state.todos.filter(todo => todo.id !== id)]}))\n    //this.setState({todos: [...this.state.todos.filter(todo => todo.id !== id)]});\n  }\n\n  //adding a new todo\n  addTodo = (title) => {\n    console.log(title);\n\n    // Axios.post('https://jsonplaceholder.typicode.com/todos',{\n    //   id: uuid(),\n    //   title: title,\n    //   completed: false\n    // }).then(res => this.setState({todos: [...this.state.todos, res.data]}))\n\n    const newTodo = {\n      id: uuid(),\n      title: title,\n      completed: false\n    }\n    this.setState({todos: [...this.state.todos, newTodo]});\n  }\n \n  render(){\n    console.log(this.state.todos);\n    return (\n      //single curly braces when passing a variable\n      <Router>\n        <div className=\"App\">\n          {/* <h1 style={hStyle}>TODO LIST</h1> */}\n          <div className='container'>\n            <Header />\n            <Route exact path='/' render={props =>(\n              <React.Fragment>\n                <AddTodo addTodo={this.addTodo} />\n                <Todos todos= {this.state.todos} markComplete={this.markComplete} deleteTodo={this.deleteTodo} /> \n              </React.Fragment>\n            )} />\n            <Route path='/about' component={About} />\n          </div>\n        </div>\n      </Router>\n    );\n  }\n}\n\n// const hStyle = {\n//   color: 'purple'\n// }\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}